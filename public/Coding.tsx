/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 coding.glb --types 
Author: rivaiamin (https://sketchfab.com/rivaiamin)
License: CC-BY-ND-4.0 (http://creativecommons.org/licenses/by-nd/4.0/)
Source: https://sketchfab.com/3d-models/lost-programmer-43d32e4f459f4857a054579da61bb3d6
Title: Lost Programmer
*/
"use client"
import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'


type GLTFResult = GLTF & {
  nodes: {
    Cube005_0: THREE.Mesh
    hair_0: THREE.SkinnedMesh
    hair_1: THREE.SkinnedMesh
    me_0: THREE.SkinnedMesh
    me_1: THREE.SkinnedMesh
    me002_0: THREE.SkinnedMesh
    me002_1: THREE.SkinnedMesh
    kemeja_0: THREE.SkinnedMesh
    kemeja_1: THREE.SkinnedMesh
    bool1185_0: THREE.Mesh
    my_rig_rootJoint: THREE.Bone
  }
  materials: {
    laptop_tex: THREE.MeshBasicMaterial
    cloth: THREE.MeshBasicMaterial
    solidify: THREE.MeshBasicMaterial
    body: THREE.MeshBasicMaterial
    Material: THREE.MeshBasicMaterial
  }
  animations: any[]
}


type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh'] | JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function Model() {
  const { nodes, materials } = useGLTF('/coding.glb') as GLTFResult
  const group : any = useRef<THREE.Group>();
  const [rotationAxis, setRotationAxis] = useState<[number, number, number]>([Math.random(), Math.random(), Math.random()]);
  const [rotationSpeed, setRotationSpeed] = useState<number>(0.003);

  // Use useFrame to update the rotation in each frame
  useFrame(() => {
    if (group.current) {
      // Adjust the rotation values as needed
      group.current.rotation.x += rotationAxis[0] * rotationSpeed; // Adjust the rotation speed if needed
      group.current.rotation.y += rotationAxis[0] * rotationSpeed; // Adjust the rotation speed if needed
      group.current.rotation.z += rotationAxis[0] * rotationSpeed; // Adjust the rotation speed if needed
    }
  });

  return (
    <div>
    <group dispose={null} ref={group}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group position={[0, 0.752, -0.086]} rotation={[1.263, 0, 0]} scale={1.5}>
          <primitive object={nodes.my_rig_rootJoint} />
          <skinnedMesh geometry={nodes.hair_0.geometry} material={materials.cloth} skeleton={nodes.hair_0.skeleton} />
          <skinnedMesh geometry={nodes.hair_1.geometry} material={materials.solidify} skeleton={nodes.hair_1.skeleton} />
          <skinnedMesh geometry={nodes.me_0.geometry} material={materials.body} skeleton={nodes.me_0.skeleton} />
          <skinnedMesh geometry={nodes.me_1.geometry} material={materials.solidify} skeleton={nodes.me_1.skeleton} />
          <skinnedMesh geometry={nodes.me002_0.geometry} material={materials.cloth} skeleton={nodes.me002_0.skeleton} />
          <skinnedMesh geometry={nodes.me002_1.geometry} material={materials.solidify} skeleton={nodes.me002_1.skeleton} />
          <skinnedMesh geometry={nodes.kemeja_0.geometry} material={materials.cloth} skeleton={nodes.kemeja_0.skeleton} />
          <skinnedMesh geometry={nodes.kemeja_1.geometry} material={materials.solidify} skeleton={nodes.kemeja_1.skeleton} />
        </group>
        <mesh geometry={nodes.Cube005_0.geometry} material={materials.laptop_tex} position={[-0.033, -0.442, -0.467]} rotation={[2.378, 0, 0]} scale={0.149} />
        <mesh geometry={nodes.bool1185_0.geometry} material={materials.Material} position={[2.403, 0.752, -0.428]} rotation={[-0.464, 0.296, -0.932]} scale={0.106} />
      </group>
    </group>
    </div>
  )
}

useGLTF.preload('/coding.glb')
